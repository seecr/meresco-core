Changeset created on 2009-10-21 17:06:39 +0200 (Wed, 21 Oct 2009) by Seek You Too

Description: Performance improvement statistics

     changed sorting in getTop() to use Schwartzion Transform, making it 5 times faster.

Baseline version: meresco-core/tags/version_2.22.6

diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_original/merescocore/components/statistics.py version_0/merescocore/components/statistics.py
--- version_original/merescocore/components/statistics.py	2010-01-21 19:26:16.000000000 +0100
+++ version_0/merescocore/components/statistics.py	2010-01-21 19:19:48.000000000 +0100
@@ -31,6 +31,7 @@
 from os.path import isfile, join
 from inspect import currentframe
 from time import mktime, gmtime
+import operator
 from merescocore.framework import Observable
 
 snapshotFilename = 'snapshot'
@@ -78,7 +79,11 @@
             self._data[statisticId] = dict(self.getTop(statisticId))
 
     def getTop(self, statisticId):
-        return sorted(self._data.get(statisticId, {}).items(), cmp=lambda (k1,v1),(k2,v2):cmp(v2,v1))[:100]
+         return sorted(
+                    self._data.get(statisticId, {}).iteritems(),
+                    key=operator.itemgetter(1),          # much faster: use Schwartzian Transform
+                    reverse=True
+               )[:100]
 
     def statisticIds(self):
         return self._data.keys()
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_original/test/statisticstest.py version_0/test/statisticstest.py
--- version_original/test/statisticstest.py	2010-01-21 19:26:15.000000000 +0100
+++ version_0/test/statisticstest.py	2010-01-21 19:19:47.000000000 +0100
@@ -28,6 +28,7 @@
 ## end license ##
 import cPickle as pickle
 from time import time
+from random import randint
 from cq2utils import CQ2TestCase
 from os import makedirs, rename
 from os.path import isfile, join
@@ -519,6 +520,16 @@
         two = Top100s({('keys',):dict([('d%02d' % i,8) for i in range(99)] + [('c',6)])})
         one.extend(two)
         self.assertEquals(dict([('a%02d' % i,10) for i in range(99)] + [('c',11)]), one._data[('keys',)])
+
+    def testPerformanceOfSchwartzianTransformInTopSorting(self):
+        stats = Statistics(self.tempdir, [('keys',)])
+        for i in xrange(1000):
+            stats._process({'keys': [randint(0, 10000)]})
+        t0 = time()
+        for i in xrange(100):
+            stats._data.get((2000,1,1,0,0,0), (2099,1,1,0,0,0)).getTop(('keys',))
+        t = time() - t0
+        self.assertTiming(0.02, t, 0.1) # used to be ~2.5
     
 class ListFactory(object):
     def doInit(self):

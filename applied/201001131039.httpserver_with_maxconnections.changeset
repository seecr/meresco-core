Changeset created on Wed Jan 13 10:39:37 CET 2010 by Seek You Too

Description: Added support for maxConnections

    Weightless now has support for handling a maximum amount of connections. Exceeding
    connections are handled using ObservableHttpServer._error
    The ApacheLogger can log these exceptions.

Baseline version: meresco-core/workingsets/2.22.6-EduRep/version_1

diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_1/deps.txt version_2/deps.txt
--- version_1/deps.txt	2010-01-06 11:49:11.000000000 +0100
+++ version_2/deps.txt	2010-01-13 10:38:06.000000000 +0100
@@ -2,11 +2,12 @@
 python-cqlparser (<<1.6)
 python-storage (>=5.1)
 python-storage (<<5.2)
-python-cq2utils (>=5.4.6)
+python-cq2utils (>=5.4.8)
 python-cq2utils (<<5.5)
-python-weightless (>=0.4.6)
+python-weightless (>=0.4.8)
 python-weightless (<<0.5)
-python-amara (=1.2a2)
+python-amara (>=1.2a2)
+python-amara (<<1.3)
 python-lxml (>=1.2)
 python-lxml (<<2.0)
 python-magic
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_1/merescocore/components/http/apachelogger.py version_2/merescocore/components/http/apachelogger.py
--- version_1/merescocore/components/http/apachelogger.py	2010-01-06 11:49:12.000000000 +0100
+++ version_2/merescocore/components/http/apachelogger.py	2010-01-13 10:38:06.000000000 +0100
@@ -7,6 +7,8 @@
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 #
 #    This file is part of Meresco Core.
 #
@@ -28,6 +30,7 @@
 
 from merescocore.framework import Transparant
 from time import strftime, gmtime
+from urlparse import urlsplit
 
 class DevNull(object):
     def write(self, *args, **kwargs):
@@ -41,7 +44,20 @@
         Transparant.__init__(self)
         self._outputStream = outputStream
         
-    def handleRequest(self, Method, Client, Headers, path, query='', *args, **kwargs):
+    def handleRequest(self, *args, **kwargs):
+        status = 0
+        for line in self.all.handleRequest(*args, **kwargs):
+            if not status and line.startswith('HTTP/1.0'):
+                status = line[len('HTTP/1.0 '):][:3]
+                self._log(status, **kwargs)
+            yield line  
+
+    def logHttpError(self, ResponseCode, RequestURI, *args, **kwargs):
+        scheme, netloc, path, query, fragments = urlsplit(RequestURI)
+        self._log(ResponseCode, path=path, query=query, **kwargs)
+        self.do.logHttpError(ResponseCode=ResponseCode, RequestURI=RequestURI, **kwargs)
+
+    def _log(self, status, Method, Client, query, Headers, path,  **kwargs):
         ipaddress = Client[0]
         timestamp = strftime('%d/%b/%Y:%H:%M:%S +0000', gmtime())
         responseSize = '??'
@@ -50,12 +66,5 @@
         Referer = Headers.get('Referer', '-')
         UserAgent = Headers.get('User-Agent', '-')
 
-        result = self.all.handleRequest(Method=Method, Client=Client, Headers=Headers, path=path, query=query, *args, **kwargs)
-
-        status = 0
-        for line in result:
-            if not status and line.startswith('HTTP/1.0'):
-                status = line[len('HTTP/1.0 '):][:3]
-                self._outputStream.write(logline % locals())
-                self._outputStream.flush()
-            yield line
+        self._outputStream.write(logline % locals())
+        self._outputStream.flush()
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_1/merescocore/components/http/observablehttpserver.py version_2/merescocore/components/http/observablehttpserver.py
--- version_1/merescocore/components/http/observablehttpserver.py	2010-01-06 11:49:12.000000000 +0100
+++ version_2/merescocore/components/http/observablehttpserver.py	2010-01-13 10:38:06.000000000 +0100
@@ -8,6 +8,8 @@
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 #
 #    This file is part of Meresco Core.
 #
@@ -32,9 +34,10 @@
 from urlparse import urlsplit
 from StringIO import StringIO
 from socket import gethostname
+from utils import serverUnavailableHtml
 
 class ObservableHttpServer(Observable):
-    def __init__(self, reactor, port, timeout=1, prio=None, sok=None):
+    def __init__(self, reactor, port, timeout=1, prio=None, sok=None, maxConnections=None):
         Observable.__init__(self)
         self._port = port
         self._reactor = reactor
@@ -42,6 +45,7 @@
         self._started = False
         self._prio = prio
         self._sok = sok
+        self._maxConnections = maxConnections
 
     def startServer(self):
         """Starts server,
@@ -52,7 +56,9 @@
         """
         self._keepHttpServerForTestingSupport = \
             HttpServer(self._reactor, self._port, self._connect,
-                timeout=self._timeout, prio=self._prio, sok=self._sok)
+                timeout=self._timeout, prio=self._prio, sok=self._sok,
+                maxConnections=self._maxConnections,
+                errorHandler=self._error)
         self._started = True
 
     def observer_init(self):
@@ -62,6 +68,11 @@
     def _connect(self, **kwargs):
         return self.handleRequest(port=self._port, **kwargs)
 
+    def _error(self, **kwargs):
+        yield serverUnavailableHtml +\
+        '<html><head></head><body><h1>Service Unavailable</h1></body></html>'
+        self.do.logHttpError(**kwargs)
+
     def handleRequest(self, RequestURI=None, *args, **kwargs):
         scheme, netloc, path, query, fragments = urlsplit(RequestURI)
         arguments = parse_qs(query, keep_blank_values=True)
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_1/merescocore/components/http/utils.py version_2/merescocore/components/http/utils.py
--- version_1/merescocore/components/http/utils.py	2010-01-06 11:49:12.000000000 +0100
+++ version_2/merescocore/components/http/utils.py	2010-01-13 10:38:06.000000000 +0100
@@ -8,6 +8,8 @@
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 #
 #    This file is part of Meresco Core.
 #
@@ -67,6 +69,11 @@
                  ContentTypeXml + CRLF + \
                  CRLF
 
+#503
+serverUnavailableHtml = "HTTP/1.0 503 Service Unavailable" + CRLF +\
+                        ContentTypeHtml + CRLF +\
+                        CRLF 
+
 def insertHeader(httpResponse, extraHeader):
     alreadyDone = False
     for response in httpResponse:
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_1/test/alltests.py version_2/test/alltests.py
--- version_1/test/alltests.py	2010-01-06 11:49:11.000000000 +0100
+++ version_2/test/alltests.py	2010-01-13 10:38:06.000000000 +0100
@@ -8,6 +8,8 @@
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 #
 #    This file is part of Meresco Core.
 #
@@ -66,6 +68,7 @@
 from framework.transactiontest import TransactionTest
 from framework.batchtransactionscopetest import BatchTransactionScopeTest
 
+from http.apacheloggertest import ApacheLoggerTest
 from http.basicauthenticationtest import BasicAuthenticationTest
 from http.fileservertest import FileServerTest
 from http.pathfiltertest import PathFilterTest
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_1/test/http/apacheloggertest.py version_2/test/http/apacheloggertest.py
--- version_1/test/http/apacheloggertest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_2/test/http/apacheloggertest.py	2010-01-13 10:38:06.000000000 +0100
@@ -0,0 +1,73 @@
+## begin license ##
+#
+#    Meresco Core is an open-source library containing components to build
+#    searchengines, repositories and archives.
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of Meresco Core.
+#
+#    Meresco Core is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Meresco Core is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Meresco Core; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from unittest import TestCase
+from cq2utils import CallTrace
+from StringIO import StringIO
+from weightless import compose
+
+from merescocore.components.http import ApacheLogger
+from merescocore.components.http.utils import okPlainText
+
+class ApacheLoggerTest(TestCase):
+    def testLogHandleRequest(self):
+        output = StringIO()
+        logger = ApacheLogger(output)
+        observer = CallTrace('handler')
+        observer.returnValues['handleRequest'] = (f for f in [okPlainText, 'text'])
+        logger.addObserver(observer)
+        
+        result = ''.join(compose(logger.handleRequest(Method='GET', Client=('127.0.0.1', 1234), RequestURI='http://example.org/path?key=value', query='key=value', path='/path', Headers={}, otherKwarg='value'))) 
+
+        self.assertEquals(okPlainText + 'text', result)
+
+        logline = output.getvalue()
+        beforeTimestamp = logline.split('[',1)[0]
+        afterTimestamp = logline.split(']', 1)[-1]
+        self.assertEquals('127.0.0.1 - - ', beforeTimestamp)
+        self.assertEquals(' "GET /path?key=value HTTP/1.0" 200 ?? "-" "-"\n'
+                , afterTimestamp)
+
+        self.assertEquals(['handleRequest'], [m.name for m in observer.calledMethods])
+        self.assertEquals([dict(Method='GET', Client=('127.0.0.1', 1234), RequestURI='http://example.org/path?key=value', query='key=value', path='/path', Headers={}, otherKwarg='value')], [m.kwargs for m in observer.calledMethods])
+
+    def testLogHttpError(self):
+        output = StringIO()
+        logger = ApacheLogger(output)
+        observer = CallTrace('handler')
+        logger.addObserver(observer)
+
+        logger.logHttpError(Method='GET', ResponseCode=503, Client=('127.0.0.1', 1234), RequestURI='http://example.org/path?key=value', Headers={}, otherKwarg='value')
+
+        logline = output.getvalue()
+        beforeTimestamp = logline.split('[',1)[0]
+        afterTimestamp = logline.split(']', 1)[-1]
+        self.assertEquals('127.0.0.1 - - ', beforeTimestamp)
+        self.assertEquals(' "GET /path?key=value HTTP/1.0" 503 ?? "-" "-"\n'
+                , afterTimestamp)
+
+        self.assertEquals(['logHttpError'], [m.name for m in observer.calledMethods])
+        self.assertEquals([dict(Method='GET', ResponseCode=503, Client=('127.0.0.1', 1234), RequestURI='http://example.org/path?key=value', Headers={}, otherKwarg='value')], [m.kwargs for m in observer.calledMethods])
+
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_1/test/http/observablehttpservertest.py version_2/test/http/observablehttpservertest.py
--- version_1/test/http/observablehttpservertest.py	2010-01-06 11:49:11.000000000 +0100
+++ version_2/test/http/observablehttpservertest.py	2010-01-13 10:38:06.000000000 +0100
@@ -7,6 +7,8 @@
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
 #    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 #
 #    This file is part of Meresco Core.
 #
@@ -29,7 +31,8 @@
 from cq2utils import CQ2TestCase, CallTrace
 from weightless import Reactor
 
-from merescocore.components.http.observablehttpserver import ObservableHttpServer
+from merescocore.components.http import ObservableHttpServer
+from merescocore.components.http.utils import CRLF
 
 class ObservableHttpServerTest(CQ2TestCase):
     def testSimpleHandleRequest(self):
@@ -62,6 +65,32 @@
         self.assertEquals(['value'], arguments['key'])
         self.assertEquals([''], arguments['emptykey'])
 
+    def testMaxConnectionsErrorHandling(self):
+        observer = CallTrace('Observer')
+        reactor = CallTrace('Reactor')
+
+        s = ObservableHttpServer(reactor, 1024, maxConnections=5)
+        s.addObserver(observer)
+        result = ''.join(s._error(ResponseCode=503, something='bicycle'))
+
+        self.assertEquals(1, len(observer.calledMethods))
+        self.assertEquals('logHttpError', observer.calledMethods[0].name)
+        self.assertEquals({'ResponseCode': 503, 'something': 'bicycle'}, observer.calledMethods[0].kwargs)
+        header, body = result.split(CRLF * 2)
+        self.assertTrue(header.startswith('HTTP/1.0 503'), header)
+        self.assertTrue('Service Unavailable' in body, body)
+
+    def testErrorHandlerRegisteredOnWeightlessHttpServer(self):
+        reactor = CallTrace('Reactor')
+
+        s = ObservableHttpServer(reactor, 1024, maxConnections=5)
+        s.startServer()
+
+        acceptor = s._keepHttpServerForTestingSupport
+        httphandler = acceptor._sinkFactory('sok')
+        errorHandler = httphandler._errorHandler
+        self.assertTrue(errorHandler == s._error)
+
     def testServerWithPrio(self):
         import gc, weakref
         prios = []

Changeset created on Thu Feb 25 15:28:46 CET 2010 by Seek You Too

Description: Improved storage to use less systemcalls

    Storage 5.1.7 added the HierarchicalStorage.getFile method which
    does not check for existence of the file until it is opened/used.
    This lowers the amount of systemcalls needed to open files.

    StorageComponent has been adapted to use this new getFile method.
    Also a proper exception handling was added to the SRU Handler so
    a more meaningful message is shown.

Baseline version: workingsets/2.22.9-EduRep/version_2

diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/deps.txt version_3/deps.txt
--- version_2/deps.txt	2010-02-25 13:41:01.000000000 +0100
+++ version_3/deps.txt	2010-02-25 15:27:52.000000000 +0100
@@ -1,6 +1,6 @@
 python-cqlparser (>=1.5)
 python-cqlparser (<<1.6)
-python-storage (>=5.1)
+python-storage (>=5.1.7)
 python-storage (<<5.2)
 python-cq2utils (>=5.4.8)
 python-cq2utils (<<5.5)
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/merescocore/components/sru/sruhandler.py version_3/merescocore/components/sru/sruhandler.py
--- version_2/merescocore/components/sru/sruhandler.py	2010-02-25 13:40:59.000000000 +0100
+++ version_3/merescocore/components/sru/sruhandler.py	2010-02-25 15:27:52.000000000 +0100
@@ -115,13 +115,15 @@
 
     def _writeRecordData(self, recordSchema=None, recordPacking=None, recordId=None):
         yield '<srw:recordData>'
-        yield self._catchErrors(self._yieldRecordForRecordPacking(recordId=recordId, recordSchema=recordSchema, recordPacking=recordPacking))
+        yield self._catchErrors(self._yieldRecordForRecordPacking(recordId=recordId, recordSchema=recordSchema, recordPacking=recordPacking), recordSchema, recordId)
         yield '</srw:recordData>'
 
-    def _catchErrors(self, dataGenerator):
+    def _catchErrors(self, dataGenerator, recordSchema, recordId):
         try:
             for stuff in compose(dataGenerator):
                 yield stuff
+        except IOError, e:
+            yield DIAGNOSTIC % tuple(GENERAL_SYSTEM_ERROR + [xmlEscape("recordSchema '%s' for identifier '%s' does not exist" % (recordSchema, recordId))])
         except Exception, e:
             yield DIAGNOSTIC % tuple(GENERAL_SYSTEM_ERROR + [xmlEscape(str(e))])
 
@@ -133,7 +135,7 @@
         yield '<srw:extraRecordData>'
         for schema in x_recordSchema:
             yield '<recordData recordSchema="%s">' % xmlEscape(schema)
-            yield self._catchErrors(self._yieldRecordForRecordPacking(recordId, schema, recordPacking))
+            yield self._catchErrors(self._yieldRecordForRecordPacking(recordId, schema, recordPacking), schema, recordId)
             yield '</recordData>'
         yield '</srw:extraRecordData>'
 
@@ -146,4 +148,4 @@
             for data in generator:
                 yield xmlEscape(data)
         else:
-            raise Exception("Unknown Record Packing: %s" % recordPacking)
\ No newline at end of file
+            raise Exception("Unknown Record Packing: %s" % recordPacking)
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/merescocore/components/storagecomponent.py version_3/merescocore/components/storagecomponent.py
--- version_2/merescocore/components/storagecomponent.py	2010-02-25 13:41:01.000000000 +0100
+++ version_3/merescocore/components/storagecomponent.py	2010-02-25 15:27:52.000000000 +0100
@@ -78,7 +78,7 @@
         return False, False
 
     def write(self, sink, id, partName):
-        stream = self._storage.get((id, partName))
+        stream = self._storage.getFile((id, partName))
         try:
             for line in stream:
                 sink.write(line)
@@ -86,13 +86,13 @@
             stream.close()
 
     def yieldRecord(self, id, partName):
-        stream = self._storage.get((id, partName))
+        stream = self._storage.getFile((id, partName))
         for data in stream:
             yield data
         stream.close()
 
     def getStream(self, id, partName):
-        return self._storage.get((id, partName))
+        return self._storage.getFile((id, partName))
 
     def _listIdentifiers(self, identifierPrefix=''):
         lastIdentifier = None
@@ -113,4 +113,4 @@
         def filterPrefixAndPart((identifier, partName)):
             return identifier.startswith(prefix) and (wantedPartname == None or wantedPartname == partName)
 
-        return ifilter(filterPrefixAndPart, self._storage.glob((prefix, wantedPartname)))
\ No newline at end of file
+        return ifilter(filterPrefixAndPart, self._storage.glob((prefix, wantedPartname)))
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/test/sru/sruhandlertest.py version_3/test/sru/sruhandlertest.py
--- version_2/test/sru/sruhandlertest.py	2010-02-25 13:40:58.000000000 +0100
+++ version_3/test/sru/sruhandlertest.py	2010-02-25 15:27:52.000000000 +0100
@@ -230,6 +230,15 @@
         self.assertEquals((), extraResponseDataMethod.args)
         self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree']), set(extraResponseDataMethod.kwargs.keys()))
 
+    def testIOErrorInWriteRecordData(self):
+        observer = CallTrace()
+        observer.exceptions["yieldRecord"] = IOError()
+        component = SruHandler()
+        component.addObserver(observer)
+        result = "".join(list(compose(component._writeRecordData(recordPacking="string", recordSchema="schema", recordId="ID"))))
+        self.assertTrue("diagnostic" in result, result)
+        self.assertTrue("recordSchema 'schema' for identifier 'ID' does not exist" in result, result)
+
     def testExceptionInWriteRecordData(self):
         observer = CallTrace()
         observer.exceptions["yieldRecord"] = Exception("Test Exception")

Changeset created on Fri Jul 23 17:05:02 CEST 2010 by Seek You Too

Description: Transactions are now suspendable

    The suspendable generators introduced in Weightless 0.4.11 now also
    work with Transaction.

Baseline version: meresco-core/workingsets/3.1-Edurep/version_0

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/core/batchtransactionscope.py version_1/meresco/core/batchtransactionscope.py
--- version_0/meresco/core/batchtransactionscope.py	2010-07-21 11:59:56.000000000 +0200
+++ version_1/meresco/core/batchtransactionscope.py	2010-07-23 17:02:45.000000000 +0200
@@ -28,9 +28,11 @@
 ## end license ##
 from observable import Observable
 from transaction import TransactionException, Transaction
+from warnings import warn
 
 class BatchTransactionScope(Observable):
     def __init__(self, transactionName, reactor, batchSize=10, timeout=1):
+        warn("BatchTransactionScope is not fit for suspendable commits in timeOuts.", DeprecationWarning)
         Observable.__init__(self)
         assert timeout > 0
         self._transactionName = transactionName
@@ -57,7 +59,7 @@
 
             transaction._batchCounter += 1
             if transaction._markedForCommit or transaction._batchCounter >= self._batchSize:
-                self._commit(transaction)
+                yield self._commit(transaction)
             else:
                 self._removeTimer(transaction)
                 transaction._timerToken = self._reactor.addTimer(self._timeout,
@@ -70,7 +72,7 @@
 
     def _doTimeout(self, transaction):
          transaction._timerToken = None
-         self._commit(transaction)
+         list(self._commit(transaction))
 
     def _commit(self, transaction):
         transaction._markedForCommit = True
@@ -78,7 +80,8 @@
         if transaction == self._currentTransaction:
             self._currentTransaction = None
         if transaction._activeGenerators == 0:
-            transaction.commit()
+            for result in transaction.commit():
+                yield result
 
     def _removeTimer(self, transaction):
         if transaction._timerToken != None:
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/core/transaction.py version_1/meresco/core/transaction.py
--- version_0/meresco/core/transaction.py	2010-07-21 11:59:56.000000000 +0200
+++ version_1/meresco/core/transaction.py	2010-07-23 17:02:45.000000000 +0200
@@ -3,10 +3,11 @@
 #
 #    Meresco Core is an open-source library containing components to build
 #    searchengines, repositories and archives.
-#    Copyright (C) 2007-2009 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 #    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 #    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 #
 #    This file is part of Meresco Core.
@@ -48,12 +49,12 @@
     def commit(self):
         while self._resourceManagers:
             resourceManager = self._resourceManagers.pop(0)
-            resourceManager.commit()
+            yield resourceManager.commit()
 
     def rollback(self):
         while self._resourceManagers:
             resourceManager = self._resourceManagers.pop(0)
-            resourceManager.rollback()
+            yield resourceManager.rollback()
 
     def abort(self):
         raise TransactionException()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/core/transactionscope.py version_1/meresco/core/transactionscope.py
--- version_0/meresco/core/transactionscope.py	2010-07-21 11:59:56.000000000 +0200
+++ version_1/meresco/core/transactionscope.py	2010-07-23 17:02:45.000000000 +0200
@@ -7,6 +7,7 @@
 #    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 #    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 #
 #    This file is part of Meresco Core.
@@ -41,9 +42,13 @@
             results = self.all.unknown(message, *args, **kwargs)
             for result in results:
                 yield result
-            __callstack_var_tx__.commit()
+            results = __callstack_var_tx__.commit()
+            for result in results:
+                yield result
         except TransactionException:
-            __callstack_var_tx__.rollback()
+            results = __callstack_var_tx__.rollback()
+            for result in results:
+                yield result
         finally:
             results = None
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/transactiontest.py version_1/test/transactiontest.py
--- version_0/test/transactiontest.py	2010-07-21 11:59:55.000000000 +0200
+++ version_1/test/transactiontest.py	2010-07-23 17:02:45.000000000 +0200
@@ -81,7 +81,7 @@
         resource = MockResource()
         tx.join(resource)
         tx.join(resource)
-        tx.commit()
+        list(tx.commit())
         self.assertEquals(1, len(commitCalled))
 
     def testFreeTransaction(self):
@@ -127,3 +127,21 @@
         tx = Transaction('name')
         tx.locals['myvar'] = 'value'
         self.assertEquals('value', tx.locals['myvar'])
+
+    def testTransactionYieldsCallablesInCommits(self):
+        callable = lambda: None
+        class Committer(Observable):
+            def begin(inner):
+                inner.ctx.tx.join(inner)
+            def commit(inner):
+                yield callable
+
+        observable = Observable()
+        scope = TransactionScope("name")
+        observable.addObserver(scope)
+        scope.addObserver(Committer())
+
+        result = list(observable.all.someMethod())
+
+        self.assertTrue(callable in result)
+

Changeset created on Thu Aug 12 11:07:40 CEST 2010 by Seek You Too

Description: Solves a possible exploit in FileServer

    The exploit found was that it was able to request paths outside the
    given documentRoot, e.g. a path like '/../etc/resolv.conf' would 
    return the contents of '/etc/resolv.conf'.

    This changeset solves that behaviour and will check that a given
    path will always be a subpath of documentRoot.

Baseline version: meresco-components/workingsets/3.1.1-Edurep/version_1

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/meresco/components/http/fileserver.py version_2/meresco/components/http/fileserver.py
--- version_1/meresco/components/http/fileserver.py	2010-07-29 16:21:08.000000000 +0200
+++ version_2/meresco/components/http/fileserver.py	2010-08-12 11:07:08.000000000 +0200
@@ -25,7 +25,7 @@
 #    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 #
 ## end license ##
-from os.path import isfile, join
+from os.path import isfile, join, normpath, commonprefix
 from rfc822 import formatdate
 from time import mktime, gmtime, timezone
 from stat import ST_MTIME
@@ -105,13 +105,17 @@
             yield part
 
     def _filenameFor(self, filename):
-        while filename and filename[0] == '/':
-            filename = filename[1:]
-        filename = filename.replace('..', '')
-        return join(self._documentRoot, filename)
+        filename = '/'.join(part for part in filename.split('/') if part)
+        path = normpath(join(self._documentRoot, filename))
+        if commonprefix([self._documentRoot, path]) != self._documentRoot:
+            raise ValueError('Filename "%s" not inside documentRoot.' % filename)
+        return path
 
     def fileExists(self, filename):
-        return isfile(self._filenameFor(filename))
+        try:
+            return isfile(self._filenameFor(filename))
+        except ValueError:
+            return False
 
 
 class StringServer(object):
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/test/http/fileservertest.py version_2/test/http/fileservertest.py
--- version_1/test/http/fileservertest.py	2010-07-29 16:21:08.000000000 +0200
+++ version_2/test/http/fileservertest.py	2010-08-12 11:07:08.000000000 +0200
@@ -30,7 +30,7 @@
 from os.path import join
 from shutil import rmtree
 from tempfile import mkdtemp
-from os import remove
+from os import remove, makedirs
 
 from meresco.components.http.fileserver import FileServer
 
@@ -88,3 +88,17 @@
         self.assertTrue("Date: " in response)
         self.assertTrue("Last-Modified: " in response)
         self.assertTrue("Expires: " in response)
+
+    def testPathShouldBeInDocumentRoot(self):
+        documentRoot = join(self.directory, 'documentRoot')
+        makedirs(documentRoot)
+        notAllowedFile = join(self.directory, 'notAllowed.txt')
+        f = open(notAllowedFile, 'w')
+        f.write("DO NOT READ ME")
+        f.close()
+        fileServer = FileServer(documentRoot)
+
+        response = ''.join(fileServer.handleRequest(port=80, Client=('localhost', 9000), path="/../"+notAllowedFile, Method="GET", Headers={}))
+
+        self.assertTrue("HTTP/1.0 404 Not Found" in response, response)
+        self.assertTrue("<title>404 Not Found</title>" in response)

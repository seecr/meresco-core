Changeset created on Fri Dec 24 10:08:37 CET 2010 by Seek You Too

Description: Async any support added

    Support for async any added so that httpget calls can work without blocking in a meresco server.

Baseline version: meresco-core/workingsets/3.1.1-TUD/version_0

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/doc/MerescoTechnicalConcepts.txt version_1/doc/MerescoTechnicalConcepts.txt
--- version_0/doc/MerescoTechnicalConcepts.txt	2010-12-01 16:35:27.000000000 +0100
+++ version_1/doc/MerescoTechnicalConcepts.txt	2010-12-07 08:57:02.000000000 +0100
@@ -7,10 +7,10 @@
 ---------------------------------------------------------
  About Components, Application DNA and Jackson Pipelines
 ---------------------------------------------------------
-:Date: $Date: 2010-12-01 16:35:22 +0100 (Wed, 01 Dec 2010) $
-:Revision: $Revision: 2997 $
+:Date: $Date: 2010-12-07 08:56:57 +0100 (Tue, 07 Dec 2010) $
+:Revision: $Revision: 3047 $
 :Authors: Seek You Too
-:Last changed by: $LastChangedBy: ejgroene $
+:Last changed by: $LastChangedBy: johan_jonkers $
 :Contact: info@cq2.nl
 :Copyright: Â© Seek You Too
 :License: |by-nc-nd|_ Attribution-Noncommercial-No Derivative Works 3.0 License
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/core/observable.py version_1/meresco/core/observable.py
--- version_0/meresco/core/observable.py	2010-12-01 16:33:25.000000000 +0100
+++ version_1/meresco/core/observable.py	2010-12-07 08:56:32.000000000 +0100
@@ -121,6 +121,21 @@
             exType, exValue, exTraceback = exc_info()
             raise exType, exValue, exTraceback.tb_next # skip myself from traceback
 
+class AsyncanyMessage(DeferredMessage):
+    def __call__(self, *args, **kwargs):
+        try:
+            result = DeferredMessage.__call__(self, *args, **kwargs)
+            m = None
+            while True:
+                r = result.send(m) 
+                m = yield r
+                if not callable(m):
+                    raise StopIteration(m)
+        except StopIteration, e:
+            if e.args:
+                raise
+            raise AttributeError('None of the %d observers responds to asyncany.%s(...)' % (len(self._observers), self._message))
+
 class OnceMessage(DeferredMessage):
     def __call__(self, *args, **kwargs):
         done = set()
@@ -164,6 +179,7 @@
         self.any = Defer(self._observers, AnyMessage)
         self.do = Defer(self._observers, DoMessage)
         self.asyncdo = Defer(self._observers, AsyncdoMessage)
+        self.asyncany = Defer(self._observers, AsyncanyMessage)
         self.once = Defer(self._observers, OnceMessage)
         self._name = name
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/observabletest.py version_1/test/observabletest.py
--- version_0/test/observabletest.py	2010-12-01 16:33:25.000000000 +0100
+++ version_1/test/observabletest.py	2010-12-07 08:56:32.000000000 +0100
@@ -34,6 +34,7 @@
 
 from meresco.core import Observable, TransactionScope, Transparant
 from meresco.core.observable import be
+from weightless import compose
 from cq2utils.calltrace import CallTrace
 from unittest import TestCase
 
@@ -144,6 +145,37 @@
         self.assertRaises(StopIteration, retval.next)
         self.assertEquals([True], called)
 
+    def testAsyncAnyNoSuchMessage(self):
+        observable = Observable()
+        try:
+            observable.asyncany.notExisting().next()
+            self.fail('fail')
+        except AttributeError, e:
+            self.assertEquals('None of the 0 observers responds to asyncany.notExisting(...)', str(e))
+
+    def testAsyncAny2(self):
+        observable = Observable()
+        done = []
+        def callable():
+            pass
+        class Caller(Observable):
+            def useasyncany(this):
+                result = yield this.asyncany.message()
+                self.assertEquals("the answer", result)
+                yield
+        class Listener(object):
+            def message(this):
+                yield callable
+                done.append(0)
+                raise StopIteration("the answer")
+        caller = Caller()
+        caller.addObserver(Listener())
+        observable.addObserver(caller)
+        generator = compose(observable.all.useasyncany())
+        self.assertEquals(callable, generator.next())
+        retval = generator.next()
+        self.assertEquals([0], done)
+ 
     def testAddStrandEmptyList(self):
         observable = Observable()
         observable.addStrand((), [])
